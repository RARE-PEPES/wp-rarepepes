{"version":3,"sources":["main.js"],"names":["let","nftData","assetNamesOnPage","rsData","assetNames","fetchData","async","data","await","fetch","json","preloadImages","error","console","forEach","item","img","includes","asset_name","Image","src","img_url","img_obj","updateTooltipPosition","mouseX","event","clientX","mouseY","clientY","activeTooltip","document","querySelector","style","top","offsetHeight","left","offsetWidth","linkMouseOverHandler","tooltip","link","assetName","dataset","assetData","find","innerHTML","series","order","appendChild","quantity","display","classList","add","linkMouseOutHandler","remove","initTooltips","links","querySelectorAll","addEventListener","createElement","className","body"],"mappings":"AAAAA,IAAAC,QACAC,iBAAAC,OAAAC,WAEA,MAAAC,UAAAC,UACA,IACA,IACAC,EAAAC,MADAA,MAAAC,MAAA,sCAAA,GACAC,KAAA,EACAT,QAAAM,EAAAA,KACAI,cAAA,CAGA,CAFA,MAAAC,GACAC,QAAAD,MAAA,uBAAAA,CAAA,CACA,CACA,EAEAD,cAAA,KACAV,QAAAa,QAAAC,IACA,IACAC,EADAd,iBAAAe,SAAAF,EAAAG,UAAA,KACAF,EAAA,IAAAG,OACAC,IAAAL,EAAAM,QACAN,EAAAO,QAAAN,EAEA,CAAA,CACA,EAEAO,sBAAA,IACAvB,IAAAwB,EAAAC,EAAAC,QACAC,EAAAF,EAAAG,QACAC,EAAAC,SAAAC,cAAA,oBAAA,EACAF,IACAA,EAAAG,MAAAC,IAAAN,GAAAE,EAAAK,aAAA,IAAA,KACAL,EAAAG,MAAAG,KAAAX,EAAAK,EAAAO,YAAA,EAAA,KAEA,EAEAC,qBAAA,CAAAC,EAAAC,KACA,GAAAtC,QAAA,CAOA,MAAAuC,EAAAD,EAAAE,QAAAD,WACAE,EAAAzC,QAAA0C,KAAA5B,GAAAA,EAAAG,aAAAsB,CAAA,IAIAF,EAAAM;kBACAF,EAAAxB;gCACAwB,EAAAG,sCAAAH,EAAAI;cAEAR,EAAAS,YAAAL,EAAApB,OAAA,EACAgB,EAAAM;2CACAF,EAAAM;WARAV,EAAAM,UAAA,+BALA,MAJAN,EAAAM,UAAA,0BACAN,EAAAN,MAAAiB,QAAA,QACAX,EAAAY,UAAAC,IAAA,QAAA,CAoBA,EAEAC,oBAAA,IACAd,EAAAN,MAAAiB,QAAA,OACAX,EAAAY,UAAAG,OAAA,QAAA,CACA,EAEAC,aAAA,KACA,IAAAC,EAAAzB,SAAA0B,iBAAA,UAAA,EACAD,IAIAzB,SAAA2B,iBAAA,YAAAlC,qBAAA,EAEAgC,EAAAzC,QAAA,IACA,MAAAwB,EAAAR,SAAA4B,cAAA,KAAA,EACApB,EAAAqB,UAAA,aACA7B,SAAA8B,KAAAb,YAAAT,CAAA,EAEAC,EAAAkB,iBAAA,YAAA,IAAApB,qBAAAC,EAAAC,CAAA,CAAA,EACAA,EAAAkB,iBAAA,WAAA,IAAAL,oBAAAd,CAAA,CAAA,CACA,CAAA,EACA,EAEAR,SAAA2B,iBAAA,mBAAAnD,MAAAmB,IACAjB,MAAAH,UAAA,EACAiD,aAAA,CACA,CAAA","file":"main.min.js","sourcesContent":["let nftData;\nlet assetNamesOnPage = rsData.assetNames; // Defined in shortcode.php\n\nconst fetchData = async () => {\n    try {\n        const response = await fetch('https://data.rarepepes.com/items/nft');\n        const data = await response.json();\n        nftData = data.data;\n        preloadImages();\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n}\n\nconst preloadImages = () => {\n    nftData.forEach(item => {\n        if (assetNamesOnPage.includes(item.asset_name)) {\n            const img = new Image();\n            img.src = item.img_url;\n            item.img_obj = img;\n        }\n    });\n}\n\nconst updateTooltipPosition = (event) => {\n    let mouseX = event.clientX;\n    let mouseY = event.clientY;\n    const activeTooltip = document.querySelector('.rs-tooltip.active');\n    if (activeTooltip) {\n        activeTooltip.style.top = `${mouseY - (activeTooltip.offsetHeight + 10)}px`;\n        activeTooltip.style.left = `${mouseX - (activeTooltip.offsetWidth / 2)}px`;\n    }\n}\n\nconst linkMouseOverHandler = (tooltip, link) => {\n    if (!nftData) {\n        tooltip.innerHTML = 'Data is not loaded yet.';\n        tooltip.style.display = 'block';\n        tooltip.classList.add('active');\n        return;\n    }\n\n    const assetName = link.dataset.assetName;\n    const assetData = nftData.find(item => item.asset_name === assetName);\n    if (!assetData) {\n        tooltip.innerHTML = 'No data found for this asset.';\n    } else {\n        tooltip.innerHTML = `\n            <h3>${assetData.asset_name}</h3>\n            <p>Series <strong>${assetData.series}</strong>&nbsp; Card <strong>${assetData.order}</strong></p>\n            `;\n        tooltip.appendChild(assetData.img_obj);\n        tooltip.innerHTML += `\n            <p>Initially Issued: <strong>${assetData.quantity}</strong></p>\n        `;\n    }\n    tooltip.style.display = 'block';\n    tooltip.classList.add('active');\n}\n\nconst linkMouseOutHandler = (tooltip) => {\n    tooltip.style.display = 'none';\n    tooltip.classList.remove('active');\n}\n\nconst initTooltips = () => {\n    const links = document.querySelectorAll('.rs-link');\n    if (!links) {\n        return;\n    }\n\n    document.addEventListener('mousemove', updateTooltipPosition);\n\n    links.forEach((link) => {\n        const tooltip = document.createElement('div');\n        tooltip.className = 'rs-tooltip';\n        document.body.appendChild(tooltip);\n\n        link.addEventListener('mouseover', () => linkMouseOverHandler(tooltip, link));\n        link.addEventListener('mouseout', () => linkMouseOutHandler(tooltip));\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', async (event) => {\n    await fetchData();\n    initTooltips();\n});\n"]}