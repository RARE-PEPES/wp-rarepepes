{"version":3,"sources":["main.js"],"names":["let","nftData","assetNamesOnPage","rsData","assetNames","activeTooltip","documentTouchTriggered","fetchData","async","data","await","fetch","json","preloadImages","error","console","forEach","item","img","includes","asset_name","Image","src","img_url","img_obj","generateTooltipHTML","assetData","series","order","quantity","updateTooltipPosition","tooltip","event","mouseX","clientX","mouseY","clientY","tooltipWidth","offsetWidth","tooltipHeight","offsetHeight","viewportWidth","window","innerWidth","style","top","left","linkMouseHandler","link","isClick","stopPropagation","display","innerHTML","createTooltipElement","document","createElement","className","body","appendChild","find","assetName","initTooltips","isTouchDevice","documentElement","links","dataset","addEventListener","preventDefault","target","classList","contains","querySelectorAll","Array","from","map","join"],"mappings":"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","file":"main.min.js","sourcesContent":["let nftData;\nlet assetNamesOnPage = rsData.assetNames; // Defined in shortcode.php\nlet activeTooltip = null;\nlet documentTouchTriggered = false;\n\n// Fetch data from server\nconst fetchData = async (assetNames) => {\n    try {\n        const response = await fetch(`https://data.rarepepes.com/items/nft?filter[asset_name][_in]=${assetNames}`);\n        const data = await response.json();\n        nftData = data.data;\n        preloadImages();\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n}\n\n// Preload images from fetched data\nconst preloadImages = () => {\n    nftData.forEach(item => {\n        if (assetNamesOnPage.includes(item.asset_name)) {\n            const img = new Image();\n            img.src = item.img_url;\n            item.img_obj = img;\n        }\n    });\n}\n\n// Generate tooltip HTML\nconst generateTooltipHTML = (assetData) => {\n    if (!assetData) {\n        return 'No data found for this asset.';\n    } else {\n        return `\n            <h3>${assetData.asset_name}</h3>\n            <p>Series <strong>${assetData.series}</strong>&nbsp; Card <strong>${assetData.order}</strong></p>\n            <img src=\"${assetData.img_obj.src}\" alt=\"${assetData.asset_name}\" />\n            <p>Initially Issued: <strong>${assetData.quantity}</strong></p>\n        `;\n    }\n}\n\n// Update tooltip position on the screen\nconst updateTooltipPosition = (tooltip, event) => {\n    let mouseX = event.clientX;\n    let mouseY = event.clientY;\n    const tooltipWidth = tooltip.offsetWidth;\n    const tooltipHeight = tooltip.offsetHeight;\n    const viewportWidth = window.innerWidth;\n\n    tooltip.style.top = mouseY < 400 ? `${mouseY + 10}px` : `${mouseY - (tooltipHeight + 10)}px`;\n    tooltip.style.left = mouseX + tooltipWidth / 2 > viewportWidth ? `${viewportWidth - tooltipWidth - 10}px`\n        : mouseX - tooltipWidth / 2 < 0 ? '10px'\n            : `${mouseX - (tooltipWidth / 2)}px`;\n}\n\n// Tooltip Mouse Handler\nconst linkMouseHandler = (tooltip, link, event, isClick = false) => {\n    if (!nftData) {\n        tooltip.innerHTML = 'Data is not loaded yet.';\n        return;\n    }\n\n    if (isClick) {\n        event.stopPropagation();\n\n        if (activeTooltip === tooltip) {\n            tooltip.style.display = 'none';\n            activeTooltip = null;\n        } else {\n            if (documentTouchTriggered) {\n                documentTouchTriggered = false;\n            } else {\n                tooltip.style.display = 'block';\n                if (activeTooltip) activeTooltip.style.display = 'none';\n                activeTooltip = tooltip;\n            }\n        }\n    } else {\n        tooltip.style.display = 'block';\n        activeTooltip = tooltip;\n    }\n\n    updateTooltipPosition(tooltip, event);\n}\n\n// Create tooltip element\nconst createTooltipElement = (assetName) => {\n    const tooltip = document.createElement('div');\n    tooltip.className = 'rs-tooltip';\n    document.body.appendChild(tooltip);\n    const assetData = nftData.find(item => item.asset_name === assetName);\n    tooltip.innerHTML = generateTooltipHTML(assetData);\n    return tooltip;\n}\n\n// Initialize tooltips for all the links on the page\nconst initTooltips = (links) => {\n    const isTouchDevice = 'ontouchstart' in document.documentElement;\n\n    links.forEach((link) => {\n        const tooltip = createTooltipElement(link.dataset.assetName);\n\n        if (isTouchDevice) {\n            link.addEventListener('click', (event) => {\n                event.stopPropagation();\n                event.preventDefault();\n                linkMouseHandler(tooltip, link, event, true);\n            });\n        } else {\n            link.addEventListener('mouseover', (event) => {\n                linkMouseHandler(tooltip, link, event);\n            });\n            link.addEventListener('mouseout', () => {\n                tooltip.style.display = 'none';\n                activeTooltip = null;\n            });\n            link.addEventListener('mousemove', (event) => {\n                updateTooltipPosition(tooltip, event);\n            });\n        }\n    });\n\n    // close tooltip on touchstart anywhere on the document that is not the link\n    if (isTouchDevice) {\n        document.addEventListener('touchstart', (event) => {\n            if (!event.target.classList.contains('rs-link') && activeTooltip) {\n                activeTooltip.style.display = 'none';\n                activeTooltip = null;\n            }\n        });\n    }\n}\n\n// When the document is loaded, fetch data and initialize tooltips\ndocument.addEventListener('DOMContentLoaded', async () => {\n    const links = document.querySelectorAll('.rs-link');\n    let assetNames = Array.from(links).map(link => link.dataset.assetName);\n    assetNames = assetNames.join(',');\n    await fetchData(assetNames);\n    initTooltips(links);\n});\n"]}