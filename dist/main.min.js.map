{"version":3,"sources":["main.js"],"names":["let","nftData","assetNamesOnPage","rsData","assetNames","activeTooltip","fetchData","async","data","await","fetch","json","preloadImages","error","console","forEach","item","img","includes","asset_name","Image","src","img_url","img_obj","linkMouseHandler","tooltip","link","event","isClick","assetName","dataset","assetData","find","innerHTML","series","order","appendChild","quantity","style","display","updateTooltipPosition","mouseX","clientX","mouseY","clientY","tooltipWidth","offsetWidth","tooltipHeight","offsetHeight","viewportWidth","window","innerWidth","top","left","initTooltips","links","document","querySelectorAll","isTouchDevice","documentElement","createElement","className","body","addEventListener","preventDefault"],"mappings":"AAAAA,IAAAC,QACAC,iBAAAC,OAAAC,WACAC,cAAA,KAEA,MAAAC,UAAAC,UACA,IACA,IACAC,EAAAC,MADAA,MAAAC,MAAA,sCAAA,GACAC,KAAA,EACAV,QAAAO,EAAAA,KACAI,cAAA,CAGA,CAFA,MAAAC,GACAC,QAAAD,MAAA,uBAAAA,CAAA,CACA,CACA,EAEAD,cAAA,KACAX,QAAAc,QAAAC,IACA,IACAC,EADAf,iBAAAgB,SAAAF,EAAAG,UAAA,KACAF,EAAA,IAAAG,OACAC,IAAAL,EAAAM,QACAN,EAAAO,QAAAN,EAEA,CAAA,CACA,EAEAO,iBAAA,CAAAC,EAAAC,EAAAC,EAAAC,EAAA,CAAA,KACA,GAAA3B,QAAA,CAKA,MAAA4B,EAAAH,EAAAI,QAAAD,UACAE,EAAA9B,QAAA+B,KAAAhB,GAAAA,EAAAG,aAAAU,CAAA,EAEAE,GAGAN,EAAAQ;kBACAF,EAAAZ;gCACAY,EAAAG,sCAAAH,EAAAI;cAEAV,EAAAW,YAAAL,EAAAR,OAAA,EACAE,EAAAQ;2CACAF,EAAAM;WARAZ,EAAAQ,UAAA,gCAeA5B,cAHAuB,EACAvB,gBAAAoB,GACAA,EAAAa,MAAAC,QAAA,OACA,OAEAd,EAAAa,MAAAC,QAAA,QACAlC,gBAAAA,cAAAiC,MAAAC,QAAA,QACAd,IAGAA,EAAAa,MAAAC,QAAA,QACAd,GAGAe,sBAAAf,EAAAE,CAAA,CAhCA,MAFAF,EAAAQ,UAAA,yBAmCA,EAEAO,sBAAA,CAAAf,EAAAE,KAEA3B,IAAAyC,EAAAd,EAAAe,QACAC,EAAAhB,EAAAiB,QACAC,EAAApB,EAAAqB,YACAC,EAAAtB,EAAAuB,aACAC,EAAAC,OAAAC,WAIA1B,EAAAa,MAAAc,IADAT,EAAA,IACAA,EAAA,GAAA,KAEAA,GAAAI,EAAA,IAAA,KAKAtB,EAAAa,MAAAe,KADAJ,EAAAR,EAAAI,EAAA,EACAI,EAAAJ,EAAA,GAAA,KAEAJ,EAAAI,EAAA,EAAA,EACA,OAKAJ,EAAAI,EAAA,EAAA,IAEA,EAEAS,aAAA,KACA,IAAAC,EAAAC,SAAAC,iBAAA,UAAA,EACA,GAAAF,EAAA,CAIA,MAAAG,EAAA,iBAAAF,SAAAG,gBAEAJ,EAAAxC,QAAA,IACA,MAAAU,EAAA+B,SAAAI,cAAA,KAAA,EACAnC,EAAAoC,UAAA,aACAL,SAAAM,KAAA1B,YAAAX,CAAA,EAEAiC,EACAhC,EAAAqC,iBAAA,QAAA,IACApC,EAAAqC,eAAA,EACAxC,iBAAAC,EAAAC,EAAAC,EAAA,CAAA,CAAA,CACA,CAAA,GAEAD,EAAAqC,iBAAA,YAAA,IACAvC,iBAAAC,EAAAC,EAAAC,CAAA,CACA,CAAA,EACAD,EAAAqC,iBAAA,WAAA,KACAtC,EAAAa,MAAAC,QAAA,OACAlC,cAAA,IACA,CAAA,EACAqB,EAAAqC,iBAAA,YAAA,IACAvB,sBAAAf,EAAAE,CAAA,CACA,CAAA,EAEA,CAAA,CA1BA,CA2BA,EAEA6B,SAAAO,iBAAA,mBAAAxD,MAAAoB,IACAlB,MAAAH,UAAA,EACAgD,aAAA,CACA,CAAA","file":"main.min.js","sourcesContent":["let nftData;\nlet assetNamesOnPage = rsData.assetNames; // Defined in shortcode.php\nlet activeTooltip = null;\n\nconst fetchData = async () => {\n    try {\n        const response = await fetch('https://data.rarepepes.com/items/nft');\n        const data = await response.json();\n        nftData = data.data;\n        preloadImages();\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n}\n\nconst preloadImages = () => {\n    nftData.forEach(item => {\n        if (assetNamesOnPage.includes(item.asset_name)) {\n            const img = new Image();\n            img.src = item.img_url;\n            item.img_obj = img;\n        }\n    });\n}\n\nconst linkMouseHandler = (tooltip, link, event, isClick = false) => {\n    if (!nftData) {\n        tooltip.innerHTML = 'Data is not loaded yet.';\n        return;\n    }\n\n    const assetName = link.dataset.assetName;\n    const assetData = nftData.find(item => item.asset_name === assetName);\n\n    if (!assetData) {\n        tooltip.innerHTML = 'No data found for this asset.';\n    } else {\n        tooltip.innerHTML = `\n            <h3>${assetData.asset_name}</h3>\n            <p>Series <strong>${assetData.series}</strong>&nbsp; Card <strong>${assetData.order}</strong></p>\n            `;\n        tooltip.appendChild(assetData.img_obj);\n        tooltip.innerHTML += `\n            <p>Initially Issued: <strong>${assetData.quantity}</strong></p>\n        `;\n    }\n\n    if (isClick) {\n        if (activeTooltip === tooltip) {\n            tooltip.style.display = 'none';\n            activeTooltip = null;\n        } else {\n            tooltip.style.display = 'block';\n            if (activeTooltip) activeTooltip.style.display = 'none';\n            activeTooltip = tooltip;\n        }\n    } else {\n        tooltip.style.display = 'block';\n        activeTooltip = tooltip;\n    }\n\n    updateTooltipPosition(tooltip, event);\n}\n\nconst updateTooltipPosition = (tooltip, event) => {\n    // Positioning logic\n    let mouseX = event.clientX;\n    let mouseY = event.clientY;\n    const tooltipWidth = tooltip.offsetWidth;\n    const tooltipHeight = tooltip.offsetHeight;\n    const viewportWidth = window.innerWidth;\n\n    // If tooltip overflows to the top, place below cursor\n    if (mouseY < 400) {\n        tooltip.style.top = `${mouseY + 10}px`;\n    } else {\n        tooltip.style.top = `${mouseY - (tooltipHeight + 10)}px`;\n    }\n\n    // If tooltip overflows to the sides, place at edge of viewport\n    if (mouseX + tooltipWidth / 2 > viewportWidth) {\n        tooltip.style.left = `${viewportWidth - tooltipWidth - 10}px`; // 10px padding from right\n    }\n    else if (mouseX - tooltipWidth / 2 < 0) {\n        tooltip.style.left = '10px'; // 10px padding from left\n    }\n\n    // Normal centered positioning\n    else {\n        tooltip.style.left = `${mouseX - (tooltipWidth / 2)}px`;\n    }\n}\n\nconst initTooltips = () => {\n    const links = document.querySelectorAll('.rs-link');\n    if (!links) {\n        return;\n    }\n\n    const isTouchDevice = 'ontouchstart' in document.documentElement;\n\n    links.forEach((link) => {\n        const tooltip = document.createElement('div');\n        tooltip.className = 'rs-tooltip';\n        document.body.appendChild(tooltip);\n\n        if (isTouchDevice) {\n            link.addEventListener('click', (event) => {\n                event.preventDefault();\n                linkMouseHandler(tooltip, link, event, true);\n            });\n        } else {\n            link.addEventListener('mouseover', (event) => {\n                linkMouseHandler(tooltip, link, event);\n            });\n            link.addEventListener('mouseout', () => {\n                tooltip.style.display = 'none';\n                activeTooltip = null;\n            });\n            link.addEventListener('mousemove', (event) => {\n                updateTooltipPosition(tooltip, event);\n            });\n        }\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', async (event) => {\n    await fetchData();\n    initTooltips();\n});\n"]}